算法的作者 ——Robert Tarjan。他是一名著名的计算机科学家，我们耳熟能详的 最近公共祖先（LCA）问题、强连通分量 问题、双连通分量 问题的高效算法都是由他发现并解决的，同时他还参与了开发斐波那契堆、伸展树 的工作。
割点
若从图中删除节点 x 以及所有与 x 关联的边之后，图将被分成两个或两个以上的不相连的子图，那么称 x 为图的割点。
桥
若从图中删除边 e 之后，图将分裂成两个不相连的子图，那么称 e 为图的桥或割边。
（图在https://zhuanlan.zhihu.com/p/101923309）
时间戳
​时间戳是用来标记图中每个节点在进行深度优先搜索时被访问的时间顺序，当然，你可以理解成一个序号（这个序号由小到大），用 dfn[x] 来表示。

搜索树
在无向图中，我们以某一个节点 x 出发进行深度优先搜索，每一个节点只访问一次，所有被访问过的节点与边构成一棵树，我们可以称之为“无向连通图的搜索树”。

追溯值
追溯值用来表示从当前节点 x 作为搜索树的根节点出发，能够访问到的所有节点中，时间戳最小的值 —— low[x]。那么，我们要限定下什么是“能够访问到的所有节点”？，其需要满足下面的条件之一即可：

之后，其实就可以形似一个DAG（有向无环图）

以 x 为根的搜索树的所有节点
通过一条非搜索树上的边，能够到达搜索树的所有节点
为了方便理解，让我们通过动画的方式来模拟追溯值真实计算过程。
（视频也在上面链接）

例题：洛谷P3387,POJ2186

无向图的桥判定法则
在一张无向图中，判断边 e （其对应的两个节点分别为 u 与 v）是否为桥，需要其满足如下条件即可：dfn[u] < low[v]

它代表的是节点 u 被访问的时间，要优先于（小于）以下这些节点被访问的时间 —— low[v] 。

以节点 v 为根的搜索树中的所有节点
通过一条非搜索树上的边，能够到达搜索树的所有节点（在追溯值内容中有所解释）
是不是上面的两个条件很眼熟？对，其实就是前文提到的追溯值 —— low[v]。